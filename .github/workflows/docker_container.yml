name: Build and Push Docker Container, then Run Tests
# This workflow builds a Docker container for Python GDAL, pushes it to GitHub Container Registry,
on:
  push:
    branches:
      - main
      - container/*
      - release/*
    tags:
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/python-gdal

jobs:
  # Job 1: Build and push container
  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.description=Python GDAL development container
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Output image
      id: image
      run: |
        # Use the first tag generated by metadata-action
        PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "image=$PRIMARY_TAG" >> $GITHUB_OUTPUT
        echo "Primary image tag: $PRIMARY_TAG"
        echo "All tags: ${{ steps.meta.outputs.tags }}"

    # Add debug step to verify the image was pushed
    - name: Verify image exists
      run: |
        PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Checking if image exists: $PRIMARY_TAG"
        docker manifest inspect "$PRIMARY_TAG"

  # Job 2: Use the cached container for testing
  test:
    needs: build-container
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-container.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify environment
      run: |
        python -c "from osgeo import gdal; print(f'GDAL version: {gdal.__version__}')"
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"


    - name: Run tests
      run: |
        pytest -v --cov=. --cov-report=xml
